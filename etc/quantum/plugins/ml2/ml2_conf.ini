[database]
# (StrOpt) SQLAlchemy database connection string. This MUST be changed
# to actually run the plugin with persistent storage.
#
# connection = sqlite://
# Example: connection = mysql://root:password@localhost/quantum_ml2?charset=utf8

# (IntOpt) Database reconnection retry limit after database
# connectivity is lost. Value of -1 specifies infinite retry limit.
#
# max_retries = 10
# Example: max_retries = -1

# (IntOpt) Database reconnection interval in seconds after the initial
# connection to the database fails.
#
# retry_interval = 2
# Example: retry_interval = 10

# (IntOpt) Minimum number of MySQL connections to keep open in a pool.
#
# min_pool_size = 1
# Example: min_pool_size = 5

# (IntOpt) Maximum number of MySQL connections to keep open in a pool.
#
# max_pool_size =
# Example: sql_max_pool_size = 20

# (IntOpt) Timeout in seconds before idle MySQL connections are
# reaped.
#
# idle_timeout = 3600
# Example: idle_timeout = 6000

# Maximum number of SQL connections to keep open in a QueuePool in SQLAlchemy
# Example sqlalchemy_pool_size = 5
# Maximum number of overflow connections in a QueuePool in SQLAlchemy
# Example sqlalchemy_max_overflow = 10
# Timeout of the open connections QueuePool in SQLAlchemy
# Example sqlalchemy_pool_timeout = 30

[ml2]
# (ListOpt) List of network type driver entrypoints to be loaded from
# the quantum.ml2.type_drivers namespace.
#
# type_drivers = local,flat,vlan,gre
# Example: type_drivers = flat,vlan,gre

# (ListOpt) Ordered list of network_types to allocate as tenant
# networks. The default value 'local' is useful for single-box testing
# but provides no connectivity between hosts.
#
# tenant_network_types = local
# Example: tenant_network_types = vlan,gre

[ml2_type_flat]
# (ListOpt) List of physical_network names with which flat networks
# can be created. Use * to allow flat networks with arbitrary
# physical_network names.
#
# flat_networks =
# Example:flat_networks = physnet1,physnet2
# Example:flat_networks = *

[ml2_type_vlan]
# (ListOpt) List of <physical_network>[:<vlan_min>:<vlan_max>] tuples
# specifying physical_network names usable for VLAN provider and
# tenant networks, as well as ranges of VLAN tags on each
# physical_network available for allocation as tenant networks.
#
# network_vlan_ranges =
# Example: network_vlan_ranges = physnet1:1000:2999,physnet2
